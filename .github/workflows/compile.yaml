name: Gulp CI/CD Workflow
on:
  push:
    branches:
      - main
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository
      - uses: actions/checkout@v4
      
      # 2. Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      # 3. Setup Quarto
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.4.549
          
      # 4. Setup Pandoc
      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2
          
      # 5. Install Dependencies
      - name: Install Dependencies
        run: |
          npm install gulp
          npm install gulp-cli
          npm install @rollup/plugin-babel @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-terser
          npm install gulp-zip gulp-header-comment gulp-eslint gulp-clean-css gulp-connect gulp-autoprefixer
          npm install sass
          npm install through2
          npm install yargs
          npm install glob
          npm install node-qunit-puppeteer
          npm install decktape  # Decktape installation
          npm install express  # Install Express for custom server
      
      # 6. Build Project with Gulp
      - name: Build Project
        run: |
          npx gulp css
          npx gulp js
          npx gulp plugins
          
      # 7. Render Markdown and Quarto Files
      - name: Render Markdown and Quarto Files
        run: |
          for file in *.md; do
            if [ -f "$file" ] && [ "$file" != "README.md" ] && [ "$file" != "CONTRIBUTING.md" ] && [ "$file" != "LICENSE.md" ]; then
              echo "Processing $file..."
              if ! quarto render "$file" --to revealjs; then
                echo "Warning: Failed to process $file, skipping..."
                continue
              fi
            fi
          done
          
          for file in *.qmd; do
            if [ -f "$file" ]; then
              echo "Processing $file..."
              if ! quarto render "$file" --to revealjs; then
                echo "Warning: Failed to process $file, skipping..."
                continue
              fi
            fi
          done

      # 8. **List Files After Rendering (Debugging)**
      - name: List Files After Rendering
        run: |
          echo "Listing files after rendering:"
          ls -R

      # 9. **Copy Missing Resources to Expected Relative Paths**
      - name: Copy Missing Resources
        run: |
          # Define an associative array mapping absolute URL paths to actual file locations in the repository
          declare -A paths=(
            ["/lib/font/inter/inter.css"]="lib/font/inter/inter.css"
            ["/path/to/your/image.jpg"]="path/to/your/image.jpg"
            ["/path/to/nathan_image.jpg"]="path/to/nathan_image.jpg"
            ["/path/to/alien_intelligence_image.jpg"]="path/to/alien_intelligence_image.jpg"
            ["/path/to/global_healthcare_image.jpg"]="path/to/global_healthcare_image.jpg"
            ["/path/to/ai_legal_aid_image.jpg"]="path/to/ai_legal_aid_image.jpg"
            ["/path/to/hope_caution_image.jpg"]="path/to/hope_caution_image.jpg"
            ["/path/to/ai_news_sources_image.jpg"]="path/to/ai_news_sources_image.jpg"
            ["/path/to/kristen_image.jpg"]="path/to/kristen_image.jpg"
            ["/path/to/credit_karma_image.jpg"]="path/to/credit_karma_image.jpg"
            ["/path/to/credit_karma_implementation.jpg"]="path/to/credit_karma_implementation.jpg"
            ["/path/to/one_medical_image.jpg"]="path/to/one_medical_image.jpg"
            ["/path/to/one_medical_implementation.jpg"]="path/to/one_medical_implementation.jpg"
            ["/path/to/urgency_image.jpg"]="path/to/urgency_image.jpg"
            ["/path/to/adwords_image.jpg"]="path/to/adwords_image.jpg"
            ["/path/to/adwords_implementation.jpg"]="path/to/adwords_implementation.jpg"
            ["/path/to/contact_image.jpg"]="path/to/contact_image.jpg"
            ["/path/to/neural-networks.jpg"]="path/to/neural-networks.jpg"
            ["/path/to/sustainability-image.jpg"]="path/to/sustainability-image.jpg"
            # Add more mappings as needed based on your 404 errors
          )

          for abs_path in "${!paths[@]}"; do
            src="${paths[$abs_path]}"
            # Remove leading '/' to make it relative to the repository root
            rel_path="${abs_path#/}"
            dest_path=$(dirname "${rel_path}")
            dest_file=$(basename "${rel_path}")
            mkdir -p "$dest_path"
            if [ -f "$src" ]; then
              cp "$src" "$dest_path/$dest_file"
              echo "Copied $src to $dest_path/$dest_file"
            else
              echo "Warning: Source file $src does not exist, skipping."
            fi
          done

      # 10. **List Files After Copying Resources (Debugging)**
      - name: List Files After Copying Resources
        run: |
          echo "Listing files after copying resources:"
          ls -R

      # 11. **Create Express Server Script**
      - name: Create Express Server
        run: |
          cat <<EOF > server.js
          const express = require('express');
          const path = require('path');
          const app = express();
          const PORT = 8080;

          // Serve static files from repository root
          app.use(express.static(path.join(__dirname, '.')));

          // Handle all other routes (for single-page applications)
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
          });

          app.listen(PORT, () => {
            console.log(\`Server is running on port \${PORT}\`);
          });
          EOF

      # 12. **Start Express Server in Background**
      - name: Start Express Server
        run: |
          node server.js &
          echo $! > server.pid

      # 13. **Wait for Server to Start**
      - name: Wait for Server
        run: sleep 5

      # 14. **Generate PDFs with Decktape**
      - name: Generate PDFs
        run: |
          mkdir -p pdfs
          for file in *.html; do
            if [ -f "$file" ]; then
              echo "Generating PDF for $file..."
              filename_without_ext="${file%.*}"
              npx decktape automatic \
                --size 1280x720 \
                --pause 1000 \
                "http://localhost:8080/$file" \
                "pdfs/${filename_without_ext}.pdf"
            fi
          done

      # 15. **Terminate Express Server**
      - name: Terminate Express Server
        run: kill $(cat server.pid)

      # 16. **List Generated PDFs (Debugging)**
      - name: List Generated PDFs
        run: |
          echo "Listing generated PDFs:"
          ls -la pdfs
          
      # 17. **Upload PDFs as Artifacts**
      - name: Upload PDFs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdfs
          path: pdfs/
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
